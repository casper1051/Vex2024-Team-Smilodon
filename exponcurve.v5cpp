{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\n\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  int systemTime = Brain.Timer.systemHighResolution();\n  double batteryCurrent = Brain.Battery.current();\n  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);\n\n  // Combine these values into a single integer\n  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;\n\n  // Set the seed\n  srand(seed);\n}\n\n\n\nvoid vexcodeInit() {\n\n  //Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       Team Smiliodon                                            */\n/*    Created:      1/25/2025                                               */\n/*    Description:  Basic Driving w/ quadr. power curve (for faster robot.    */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n#include \"vex.h\"\n#include<cmath>\n\nusing namespace vex;\nint Infinity = 1000;\n\n// Driving motors\nvex::motor left_motor = motor(PORT1, false);\nvex::motor right_motor = motor(PORT10, true);\nvex::motor left_motor2 = motor(PORT3, false);\nvex::motor right_motor2 = motor(PORT2, true);\nvex::motor ramp_motor = motor(PORT8, false);\nvex::motor second_ramp_motor = motor(PORT9, true);\nvex::motor bar_motor = motor(PORT19, false);\n\n// Clamp motor or servo (assuming it's a motor for simplicity)\nvex::digital_out clamp = digital_out(Brain.ThreeWirePort.A);\n\nbool ramp_enabled = false;\nbool is_ramp_spinning = false;\n\n// Main controller\nvex::controller Controller = controller(primary);\n\nvoid onevent_Controller1ButtonL1_pressed_0() {\n  clamp.set(true);\n}\n\nvoid onevent_Controller1ButtonL2_pressed_0() {\n  clamp.set(false);\n}\nvoid drive_direct(int left_motor_speed, int right_motor_speed, int drive_in_milliseconds) {\n    // Set the velocity for both motors\n    left_motor.setVelocity(-left_motor_speed, percent);\n    right_motor.setVelocity(-right_motor_speed, percent);\n\n    // Spin the motors for the specified duration in milliseconds\n    left_motor.spin(forward);\n    right_motor.spin(forward);\n    vex::task::sleep(drive_in_milliseconds); // Sleep for the given time\n\n    // Stop the motors after the specified duration\n    left_motor.stop();\n    right_motor.stop();\n}\nint main() {\n    // Set the default speed to 0 to prevent the motors from spinning indefinitely\n    left_motor.setVelocity(0, percent);\n    right_motor.setVelocity(0, percent);\n    left_motor2.setVelocity(0, percent);\n    right_motor2.setVelocity(0, percent);\n    ramp_motor.setVelocity(0, percent);\n    second_ramp_motor.setVelocity(0, percent);\n\n    // Register event handlers for clamp control\n    Controller.ButtonL1.pressed(onevent_Controller1ButtonL1_pressed_0);\n    Controller.ButtonL2.pressed(onevent_Controller1ButtonL2_pressed_0);\n\n    while (true) {\n        if(Controller.ButtonB.pressing()){\n            vexDelay(1000);\n            drive_direct(100, 100, 3500);\n            drive_direct(100, -100, 10);\n            vexDelay(1000);\n        }\n        if(Controller.ButtonUp.pressing()){\n            while(bar_motor.position(degrees) > -160){\n                bar_motor.setVelocity(-10, percent);\n            }\n        }\n        else{\n            while(bar_motor.position(degrees) < 0){\n                bar_motor.setVelocity(10, percent);\n            }\n        }\n        if(Controller.ButtonLeft.pressing()){\n            bar_motor.resetPosition();\n        }\n        \n        // Read joystick axis values\n        int leftcalc;\n        int rightcalc;\n\n        if (-Controller.Axis3.position() >= 0) {\n            leftcalc = pow(-Controller.Axis3.position()/10, 2.0);\n        } else {\n            leftcalc = -pow(-Controller.Axis3.position()/10, 2.0);\n        }\n\n        if (-Controller.Axis2.position() >= 0) {\n            rightcalc = pow(-Controller.Axis2.position()/10, 2.0);\n        } else {\n            rightcalc = -pow(-Controller.Axis2.position()/10, 2.0);\n        }\n        \n        int left = leftcalc;\n        int right = rightcalc;\n\n        // Check for ramp control button press\n        if (Controller.ButtonA.pressing() && !is_ramp_spinning) {\n            ramp_enabled = !ramp_enabled;\n            is_ramp_spinning = true; // Prevent rapid toggling on hold\n        } else if (!Controller.ButtonA.pressing()) {\n            is_ramp_spinning = false; // Reset the flag when the button is released\n        }\n\n        // Set the velocity of the motors based on joystick input\n        left_motor.setVelocity(left, percent);\n        right_motor.setVelocity(right, percent);\n        right_motor2.setVelocity(right, percent);\n        left_motor2.setVelocity(left, percent);\n\n        // Control the ramp motor\n        if(Controller.ButtonR1.pressing() || Controller.ButtonR2.pressing()){\n            ramp_enabled = false;\n        }\n        if (ramp_enabled || Controller.ButtonR1.pressing()) {\n            ramp_motor.setVelocity(100, percent);\n            ramp_motor.spin(forward);\n            second_ramp_motor.setVelocity(100, percent);\n            second_ramp_motor.spin(forward);\n        } else if (Controller.ButtonR2.pressing()) {\n            ramp_motor.setVelocity(100, percent);\n            ramp_motor.spin(reverse);\n            second_ramp_motor.setVelocity(100, percent);\n            second_ramp_motor.spin(reverse);\n        } else {\n            ramp_motor.stop();\n            second_ramp_motor.stop();\n        }\n\n        // Spin the motors based on the set velocity\n        left_motor.spin(forward);\n        right_motor.spin(forward);\n        left_motor2.spin(forward);\n        right_motor2.spin(forward);\n\n        // Allow other tasks to run\n        this_thread::sleep_for(20);\n    }\n}","textLanguage":"cpp","robotConfig":[],"slot":1,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}